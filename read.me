a ideia aqui é aprimorar as minhas abilidades enquanto construo um projeto

Plataforma de Feedback 360° – Aplicação Web
Aplicação full stack para gestão de feedbacks em equipes, com autenticação JWT, controle de acesso por papéis e painéis interativos. Arquitetura modular com NestJS e PostgreSQL, validação com Zod e documentação com Swagger. Frontend em Next.js com TypeScript e TailwindCSS. Deploy com Docker, CI/CD via GitHub Actions e hospedagem em DigitalOcean.

Stack: NestJS · TypeScript · PostgreSQL · Prisma ORM · Next.js · TailwindCSS · Docker · GitHub Actions



# 🧠 Feedback360

**Feedback360** é uma aplicação web desenvolvida com NestJS, Prisma ORM e PostgreSQL, que permite o registro e gerenciamento de feedbacks anônimos ou identificados entre membros de uma equipe.

---

## 🚀 Tecnologias Utilizadas

- **NestJS**: Framework Node.js baseado em TypeScript para criar aplicações backend modulares e escaláveis.
- **Prisma ORM**: ORM moderno e intuitivo para banco de dados relacional (PostgreSQL), usado para mapear modelos e acessar dados de forma tipada.
- **PostgreSQL**: Banco de dados relacional usado para armazenar os feedbacks.
- **Docker**: Utilizado para isolar o banco de dados PostgreSQL e facilitar o ambiente de desenvolvimento.
- **TypeScript**: Linguagem principal do projeto.

---

## ⚙️ Funcionalidades do Projeto

- [x] Enviar feedback com mensagem e remetente (nome ou "anônimo")
- [x] Listar todos os feedbacks registrados
- [ ] (Em breve) Login e autenticação de usuários
- [ ] (Em breve) Relatórios e estatísticas de feedbacks por período ou por remetente

---

## 📦 Estrutura do Projeto

```bash
feedback360/
├── prisma/                 # Arquivos do Prisma ORM
│   └── schema.prisma
├── src/
│   ├── feedback/           # Módulo responsável por feedbacks
│   ├── app.module.ts
│   └── main.ts
├── docker-compose.yml      # (opcional) configuração do banco
├── .env                    # Variáveis de ambiente
├── package.json
└── README.md



Que tal implementarmos algumas funcionalidades que te ensinem algoritmos naturalmente?

Sistema de ranking (algoritmos de ordenação)
Busca avançada (algoritmos de busca/filtro)
Validação inteligente (algoritmos de padrões)
Cache simples (estruturas de dados)
Toparia começar com algum desses? Assim você aprende algoritmos aplicados no seu projeto real! 🚀

DEPOIS: Implementar algoritmos naturalmente 🚀
Assim que terminarmos a autenticação, podemos implementar:

Sistema de ranking (algoritmos de ordenação)
Busca inteligente (algoritmos de busca)
Validação de dados (algoritmos de padrões)
Cache simples (estruturas de dados)

Promessa:
A partir de agora, sempre que implementarmos algo, eu vou te avisar:

🔍 "Olha! Aqui estamos usando uma PILHA para..."

🌳 "Esse código está navegando numa ÁRVORE..."

⚡ "Esse algoritmo de busca tem complexidade O(log n)..."

cd feedback360-
npm install        # Instalar dependências
docker-compose up  # Subir banco PostgreSQL
npm run start:dev  # Rodar projeto




plano para a semana 1 de setembro a 5 de setembro

Plano de Desenvolvimento para a Semana
Dia 1: Busca Avançada
Implementar endpoint de autocomplete (/feedback/autocomplete?q=termo)
Permitir busca por múltiplos campos (mensagem, sender)
Testar e documentar exemplos de uso

Dia 2: Filtros Combinados
Adicionar filtros por rating, likes, data, sender no endpoint de busca
Permitir ordenação customizada (mais relevantes, mais curtidos, mais recentes)
Testar com diferentes combinações de filtros

Dia 3: Sistema de Likes e Recomendações
Criar endpoints para curtir/descurtir feedbacks
Implementar recomendação simples (feedbacks mais curtidos ou mais relevantes)
Exibir sugestões personalizadas para o usuário

Dia 4: Cache para Performance
Implementar cache em memória (LRU) para buscas populares
Medir e comparar performance com e sem cache
Documentar resultados e ganhos

Dia 5: Testes Automatizados
Adicionar testes unitários e de integração (Jest)
Testar endpoints, regras de negócio e algoritmos
Garantir cobertura mínima de testes

Dia 6: Documentação e Apresentação
Melhorar README com exemplos, prints e explicação dos algoritmos
Documentar decisões técnicas e aprendizados
Preparar apresentação do projeto para portfólio/entrevista

Dia 7: Deploy e Portfólio
Subir o projeto em plataforma gratuita (Heroku, Vercel, Railway)
Adicionar ao seu portfólio e LinkedIn
Compartilhar aprendizados em artigo ou post
